#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <ESP8266WiFi.h>

const bool logEnabled = true;
const char* ssid     = "lynton";
const char* password = "x";
const char* host = "192.168.0.12";
const uint16_t port = 11000;
int buttonState = 0;
bool buttonPressed = true;
const int tempSensorPin = 0;     // the number of the tempsensor that is also connected to a pushbutton pin
const int ledPin =  2;
const int aliveDelay = 2000;//
const int readTemperatureDelay = 60000;// 1 minute
DHT_Unified dht(tempSensorPin, DHT11);
unsigned long aliveTimer = millis();
unsigned long readTemperatureTimer = millis();
const int ON = HIGH;
const int OFF = LOW;
String myMacAddress="";
int connectionFailCounter = 0;
const int connectionLost = 100; // Number of times of consecutives connection losts before turning off regardless
int power =100;
bool loadOn = false;

unsigned long cycle = 500;
unsigned long onFor;
unsigned long offFor;
int onoffstatus = OFF;
unsigned long powerTimerOn = millis();
unsigned long powerTimerOff = millis();
String temperatureData = "";

void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(tempSensorPin, INPUT);
  digitalWrite(ledPin, OFF);
  Serial.begin(115200);

  LogData("Connecting to:" + String(ssid));
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  LogData("WiFi connected:" +  toString(WiFi.localIP()));

  //Initialise the temperature sensor
  dht.begin();
  LogData("Temperature sensor initialised");
  myMacAddress = MyMACAddress();
}

void loop() {
  String alive = "";
  
  buttonCheck();
  
  //contact server every 5secs and send temperature reading
  if (millis() - aliveTimer > aliveDelay) {
    alive = "ALIVE";
    aliveTimer = millis();
  }

  //send temperature every minute
  if (temperatureData == "" || millis() - readTemperatureTimer > readTemperatureDelay) {
    temperatureData = "TEMPERATURE:[" + readTemperature() + "]";
    readTemperatureTimer = millis();
  }

  if (alive != "") {
     comunicateWithServer(temperatureData);
  }
 
  if (connectionFailCounter>=connectionLost ) {
    LogData("connectionFailCounter" + String(connectionFailCounter));  
    loadOn = false;
    power == 0;
  }
  
  controlPowerLevel();
}

void controlPowerLevel() {

  //The load should always have at least one full cycle of the mains 50hz:20ms
  cycle = 200;// the minimum value is 10% power. so that will be one cycle
    
  if (loadOn == false || power == 0) {
    LogData("controlPowerLevel, loadOn:" + String(loadOn) + " Power:" + String(power)); 
    onoffstatus = OFF; 
  } 

  if (loadOn == true && power == 100) {
    onoffstatus = ON;
  }
  
  if (loadOn == true && power > 0) {
    onFor=power * cycle /100;
    offFor=cycle - onFor;
    if (onoffstatus == ON && (millis() - powerTimerOn >= onFor)) {
      powerTimerOff = millis();
      onoffstatus = OFF;
    }
  
    if (onoffstatus == OFF && (millis() - powerTimerOff >= offFor)) {
      powerTimerOn = millis();
      onoffstatus = ON; 
    }
  }
  digitalWrite(ledPin, onoffstatus);
}

bool comunicateWithServer(String send_Data) {
  LogData("Connecting to:" + String(host) + ":" + String(port));

  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  if (!client.connect(host, port)) {
    LogData("Connection failed.");
    if (connectionFailCounter<=connectionLost) {
      connectionFailCounter = connectionFailCounter +1;
    }
    return false;
  }

  // This will send a string to the server
  if (client.connected()) {
    send_Data = myMacAddress + send_Data;
    client.println(send_Data);
    LogData("Data sent:" + String(send_Data));
  }

  // wait for data to be available
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      LogData("Client Timeout !");
      if (connectionFailCounter<=connectionLost) {
       connectionFailCounter = connectionFailCounter +1;
      }
      client.stop();
      delay(5000);
      return false;
    }
  }

  LogData("");
  String dataReceived = "";
  while (client.available()) {
    char ch = static_cast<char>(client.read());
    dataReceived = dataReceived + ch;
    Serial.print(ch);
  }
  LogData("");
  LogData("Data received:" + String(dataReceived));  

  int pindexStart = dataReceived.indexOf("Action:POWER[") > 0;
  if (pindexStart > 0) {
    int pindexEnd = dataReceived.indexOf("]", pindexStart);
    pindexStart = dataReceived.indexOf("[", pindexStart);
    String s_power=dataReceived.substring(pindexStart+1,pindexEnd);
    LogData("s_power:" + s_power);
    power = s_power.toInt();
    if (power>100) power = 100;
    if (power<0) power = 0;
  }
  
  if (dataReceived.indexOf("Action:ON") > 0) {
   loadOn = true;
    LogData("Load On");
  }

  if (dataReceived.indexOf("Action:OFF") > 0) {
    LogData("Load Off");
    loadOn=false;
  }

  // Close the connection
  LogData("Closing connection");
  connectionFailCounter =0;
  //client.stop(); //This raises an error on the server.
  return true;
}

String readTemperature() {
  String temperature;
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    temperature = "Error";
  }
  else {
    temperature = String(event.temperature);
  }
  LogData("Read temperature:" + temperature);
  return temperature;
}

void buttonCheck() {
  buttonState = digitalRead(tempSensorPin);
  if (buttonState == LOW)  buttonPressed = true;
  
  //The button has been pressed and then released
  if (buttonPressed && buttonState == HIGH)  { 
    comunicateWithServer("BUTTON_PRESSED");
    buttonPressed = false;
  }
}

void LogData(String data) {
  if (logEnabled) {
    Serial.println(data);
  }
}
void blinkLed() {
  digitalWrite(ledPin, HIGH);delay(100);digitalWrite(ledPin, LOW);delay(100); digitalWrite(ledPin, HIGH);delay(100);digitalWrite(ledPin, LOW);
}

String toString( IPAddress address) {
  return String() + address[0] + "." + address[1] + "." + address[2] + "." + address[3];
}

String MyMACAddress() {
  byte mac[6];
  WiFi.macAddress(mac);
  return String("MAC:[") + String(mac[0], HEX) + ":" + String(mac[1], HEX) + ":" + String(mac[2], HEX) + ":" + String(mac[3], HEX) + ":" + String(mac[4], HEX) + ":" + String(mac[5], HEX) + String("]");
}