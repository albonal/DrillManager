
#include <ESP8266WiFi.h>

#ifndef STASSID
#define STASSID "lynton"
#define STAPSK  "VMh1c32s00"
#endif

const char* ssid     = STASSID;
const char* password = STAPSK;

const char* host = "192.168.0.12";
const uint16_t port = 11000;
int buttonState = 0;
const int buttonPin = 0;     // the number of the pushbutton pin
const int ledPin =  2; 
void setup() {
  Serial.begin(115200);

  // We start by connecting to a WiFi network
  Log("Connecting to:", String(ssid),"","");
 
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Log("WiFi connected:",toString(WiFi.localIP()),"","");
  
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);
  pinMode(buttonPin, INPUT);
  
}
 bool buttonReleased = true;
 unsigned long aliveTimer = millis();
void loop() {

   buttonState = digitalRead(buttonPin);

  // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
  if (buttonState == HIGH) {
    // turn LED OFF:
    buttonReleased=true;
    digitalWrite(ledPin, HIGH);
  } 
  if (buttonState == LOW) {
    if (buttonReleased == true) {
        digitalWrite(ledPin, LOW);
        if (sendData("BUTTON_PRESSED")) {
          blinkLed();
          aliveTimer = millis();// Dont need to send the alive token if I've just pressed the button
        }
        digitalWrite(ledPin, LOW);
        buttonReleased = false;
    }
  }

  //contact server every 5secs
  if (millis() - aliveTimer > 5000) {
    if (sendData("ALIVE")) {
      blinkLed();
    }
    aliveTimer = millis();
  }
}


void blinkLed() {
 
  digitalWrite(ledPin, HIGH);
  delay(100);
  digitalWrite(ledPin, LOW);
  delay(100);
  digitalWrite(ledPin, HIGH);
  delay(100);
  digitalWrite(ledPin, LOW);
}

bool sendData(String data) {
  Log("Connecting to:",String(host),":",String(port));


  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  if (!client.connect(host, port)) {
    Log("Connection failed.","","","");
    return false;
  }

  // This will send a string to the server
  if (client.connected()) {
    client.println(data);
  }

  // wait for data to be available
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Log("Client Timeout !","","","");
      client.stop();
      delay(5000);
      return false;
    }
  }
  Serial.println("");
  String dataReceived = "";
  while (client.available()) {
    char ch = static_cast<char>(client.read());
    dataReceived = dataReceived + ch;
    Serial.print(ch);
  }
  
  if (dataReceived.indexOf("BLINK")>0) {
    blinkLed();blinkLed();blinkLed();blinkLed();
  }
  
  // Close the connection
  Log("Closing connection","","","");
  client.stop();
  return true;
}

void Log(String m1,String m2, String m3, String m4) {
  Serial.println("");
  Serial.print(m1);
  Serial.print(m2);
  Serial.print(m3);
  Serial.print(m4);
  
}

String toString( IPAddress address){
  return String() + address[0] + "." + address[1] + "." + address[2] + "." + address[3];
}

