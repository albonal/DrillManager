#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <ESP8266WiFi.h>

#ifndef STASSID
#define STASSID "lynton"
#define STAPSK  "VMh1c32s00"
#endif

const char* ssid     = STASSID;
const char* password = STAPSK;

const char* host = "192.168.0.12";
const uint16_t port = 11000;
int buttonState = 0;
const int tempSensorPin = 0;     // the number of the tempsensor that is also connected to a pushbutton pin
const int ledPin =  2;
const int aliveDelay = 5000;//
const int readTemperatureDelay = 60000;// 1 minute

DHT_Unified dht(tempSensorPin, DHT11);

bool buttonReleased = true;
unsigned long aliveTimer = millis();
unsigned long readTemperatureTimer = millis();
long lastTemperatureReading;
bool switch_active = false;
String myMacAddress="";
void setup() {
  Serial.begin(115200);

  Log("Connecting to:" + String(ssid));

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, HIGH);

  Log("WiFi connected:" +  toString(WiFi.localIP()));

  //Initialise the temperature sensor
  pinMode(tempSensorPin, INPUT);
  dht.begin();
  Log("Temperature sensor initialised");

  myMacAddress = MyMACAddress();
}

void loop() {

  buttonState = digitalRead(tempSensorPin);

  // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
  if (buttonState == HIGH) {
    // turn LED OFF:
    buttonReleased = true;
  }
  if (buttonState == LOW) {
    if (buttonReleased == true) {
      if (sendData("MAC:" + myMacAddress + "BUTTON_PRESSED")) {
        aliveTimer = millis();// Dont need to send the alive token if I've just pressed the button
      }
      buttonReleased = false;
    }
  }

  String alive = "";
  String temperatureData = "";

  //contact server every 5secs and send temperature reading
  if (millis() - aliveTimer > aliveDelay) {
    alive = "ALIVE";
    aliveTimer = millis();
  }


  if (millis() - readTemperatureTimer > readTemperatureDelay) {
    int output  = readTemperature();
    if ( output == 2) {
      temperatureData = "TEMPERATURE:Error";
    }
    if ( output == 1) {
      temperatureData = "TEMPERATURE:" + String(lastTemperatureReading);
    }
    if ( output == 0) {
      temperatureData = "TEMPERATURE:" + String(lastTemperatureReading); //No change
    }
    readTemperatureTimer = millis();
  }

  if (alive != "" || temperatureData != "") {
    String switchStatus = "";
    if (switch_active == false)  switchStatus = "SWITCH:OFF";
    if (switch_active == true)   switchStatus = "SWITCH:ON";
    if (temperatureData = "") temperatureData = "TEMPERATURE:" + String(lastTemperatureReading); //No change
    sendData("MAC:" + myMacAddress + " " + switchStatus + " " + temperatureData);
  }
}

void blinkLed() {

  digitalWrite(ledPin, HIGH);
  delay(100);
  digitalWrite(ledPin, LOW);
  delay(100);
  digitalWrite(ledPin, HIGH);
  delay(100);
  digitalWrite(ledPin, LOW);
}

bool sendData(String data) {
  Log("Connecting to:" + String(host) + ":" + String(port));

  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  if (!client.connect(host, port)) {
    Log("Connection failed.");
    return false;
  }

  // This will send a string to the server
  if (client.connected()) {
    data = myMacAddress + data;
    client.println(data);
    Log("Data sent:" + String(data));
  }

  // wait for data to be available
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Log("Client Timeout !");
      client.stop();
      delay(5000);
      return false;
    }
  }

  Serial.println("");
  String dataReceived = "";
  while (client.available()) {
    char ch = static_cast<char>(client.read());
    dataReceived = dataReceived + ch;
    Serial.print(ch);
  }
  Serial.println("");

  if (dataReceived.indexOf("Action:BLINK") > 0) {
    blinkLed(); blinkLed(); blinkLed(); blinkLed();
  }

  if (dataReceived.indexOf("Action:ON") > 0) {
    digitalWrite(ledPin, LOW);
    switch_active = true;
  }

  if (dataReceived.indexOf("Action:OFF") > 0) {
    digitalWrite(ledPin, HIGH);
    switch_active = false;
  }

  // Close the connection
  Log("Closing connection");
  //client.stop(); //This raises an error on the server.
  return true;
}

void Log(String m) {
  Serial.println(m);
}

String toString( IPAddress address) {
  return String() + address[0] + "." + address[1] + "." + address[2] + "." + address[3];
}

String MyMACAddress() {
  byte mac[6];
  WiFi.macAddress(mac);
  return String("[") + String(mac[0], HEX) + ":" + String(mac[1], HEX) + ":" + String(mac[2], HEX) + ":" + String(mac[3], HEX) + ":" + String(mac[4], HEX) + ":" + String(mac[5], HEX) + String("]");
}

int readTemperature() {
  long temperature;
  int output = 0;
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    output = 2;
  }
  else {
    temperature = event.temperature;
    if (temperature == lastTemperatureReading) {
      output = 0;
    } else {
      lastTemperatureReading = temperature;
      output = 1;
    }
  }
  Serial.println("Read temperature:" + String(output) + ":" + String(temperature));
  return output;
}